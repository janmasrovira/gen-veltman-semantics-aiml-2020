* Interpretability logics
  Hi, welcome. In this presentation I will talk about Generalised Veltman
  Semantics and their formalisztion in Agda. The authors of the paper are Joost,
  Luka, and myself: Jan. So, let's get started.

  next part.

  To begin with, let me briefly introduce the concepts in the title. Generalised
  Veltman semantics are a kind of relational semantics for interpretability
  logics. They have the same flavour as Kripke semantics for intuitionistic
  logic or provability logic. (We will come back to those in a second)

  next part.

  On the other hand Agda is a proof assistant based on dependent type theory.
  More on that during the second part of the presentation.

  next part.

  Let us give some examples of interpretations.

  The interpretation of arithmetic in set theory. This interpretation has
  foundational importance as it shows that numbers can be reduced to sets.

  pause.

  As another example, we have that Gödel's interpretation of zf plus the axiom
  of constructibility in zf. This interpretation provides a relative
  consistency proof of zf plus the continuum hypothesis w.r.t. zf.

  pause.

  # As a last example, we have the interpretation of elementary syntax in
  # arithmetic. This interpretation plays a central role in the proof of Gödel's
  # (First) Incompleteness Theorem (and in both the statement and proof the Second
  # Incompleteness Theorem.)
  As a last example, we have the interpretation of elementary syntax in
  arithmetic. This interpretation plays a central role in the Gödel's
  Incompleteness Theorem's

  next part.

  The logic gl is the logic of provability which studies the behaviour of the
  provability predicate. In this logic we have two modal operators. The first
  one is box which stands for provability. And the second operator is diamond,
  which stands for consistency. (Note that usually we define diamond in terms of
  box since saying that A is consistent is the same as saying that we cannot
  prove the negation of A.)

  next part.

  Interpretability logics extend gl and they expand the language with a binary
  modal operator, the triangle, which stands for interpretability. We write A
  triangle B to mean that A interprets B. Note that box can be defined in terms
  of triangle but for simplicity we keep it in the language during the presentation.

  In interpretability logics the goal is the following: Given an arithmetical
  theory T, we need to find a logic that describes the behaviour of the
  interpretability predicate for that theory. By that we mean that IL(T) should
  prove A if and only if the theory T proves the realization of A for any
  realization.


  next part.

  <read>

  next part.

  We now define logic IL, which is contained in almost all interpretability
  logics. As we know it extends GL and thus it has all the theorems of GL plus
  the following axioms schemes:

  pause.

  Principle J1 expresses that the identity translation defines an
  interpretation.

  pause.

  Principle J2 expresses that one can compose interpretations by applying one
  translation after another.

  pause.

  Principle J3 allows us to construct an interpretation by cases.

  pause.

  Principle J4 reflects that an interpretation gives rise to relative
  consistency.

  pause.

  Finally, J5 reflects the fact that from consistency we can derive an
  interpretation, which we can do by means of the Henkin construction in
  arithmetic.
  # that we can perform the Henkin construction in
  # arithmetic so that consistency provides an inner model from which an
  # interpretation can be derived.

  next part.

  Consider ILM, which is one of the many interpretability logics. We define ILM
  as IL plus the principle M, where M is defined as displayed. This is a very
  common way of defining interpretability logics for other principles.

  It turns out that the theorems of ILM are the set of interpretability
  principles that are provable in theories which are Σ_1 sound and have full
  induction. An example of such theory is peano arithmetic.

  next part.

  Now we proceed by defining Generalised Veltman semantics. A generalised
  Veltman frame, GVF for short, is a tuple with a non-empty set of worlds W, a
  binary relation on the worlds R and a relation $S$ which is indexed by each of
  the worlds.

  pause.

  A generalised Veltman model is a generalised veltman frame paired with a
  valuation on that frame.

  next part.

  We define the forcing relation on generalised Veltman models as we do in
  normal modal logics. The interesting case is the interprets symbol. We say that
  w forces A interprets B if and only if, if we have that some world w sees a
  world u which forces A, then there must exist some set of worlds Y such that
  u sees Y via the S_w relation, furthermore, every world in Y must force B.

  next part.

  We now define what a frame condition is. Given a principle P, we say that a
  first order formula (or a higher order formula) is
  the frame condition for P if and only if for any generalised veltman frame we
  have that it satisfies the condition if and only if it forces the principle
  for any possible valuation.

  As an example, we present the frame condition for the principle M, which we
  presented before. As we can see, it is second order since we quantify over a
  set of worlds V'.

  next part.


  We know the interpretability logic for some theories, but there are some
  exceptions. For instance, the interpretability logic of all reasonable
  arithmetical theories, which we coin IL(All), remains unknown. However, we
  have some lower bounds for it. The best known lower bound is ILWR^nR_n. W is a
  principle which we do not present in this paper but can easily be found in the
  literature. The series of principles R super n and R supra n were
  recently discovered by Goris and Joosten.
  Here we present the definition of R super n.

  pause.

  Our contribution to these series is that we have found the frame condition for
  R supra 1 and the frame condition for the whole R super n. Furthermore we have
  formalised the proofs in Agda.

  next part.

  So, what is Agda? Agda is a proof assistant based on an extension of Martin
  Löf's constructive type theory which features dependent types.

  To prove some property in Agda... (read slide)

  <Comment J1 example>: Here we have an example property encoded in an Agda
  type. It reads as follows. We have a number of arguments (or assumptions). A
  set of worlds W, relations R and S and a valuation V. A generalised Veltman
  model M with those W R S V as parameters. We have a world u and formulas A B.
  Then we can build a proof that u forces the J1 axiom instantiated with A and
  B. Note that we use the weird arrow to represent the arrow in the language of
  interpretability logics. We cannot use the normal arrow because it is used by Agda.

  If you want to know more about Agda here are some links to a list of roughly
  200 publications using Agda.

  next part.

  We have built a library which formalizes Interpretability logics in Agda. Of
  course, it contains the definition of generalised Veltman semantics and of
  ordinary Veltman semantics. Ordinary veltman semantics are a simplified
  version of generalised veltman semantics.

  next part.

  The library is open source so I invite everyone to check it out online.

  Thanks everyone for your attention and a special thanks to reviewers and the
  organizers.

  # reasonable = sigma 1 sound and have full induction.
